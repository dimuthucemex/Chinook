@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services.Albums
@using Chinook.Services.ArtistService
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <input @bind="searchQuery" @bind:event="oninput" @onkeyup="Search">
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    @inject IArtistService ArtistService
    @inject IAlbumService AlbumService


    private IEnumerable<Artist> Artists = new List<Artist>();
    private string searchQuery = string.Empty;


    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await ArtistService.GetAllAsync();
    }

    public async Task<IEnumerable<Artist>> GetArtists() => 
        await ArtistService.GetAllAsync();

    public async Task<IEnumerable<Album>> GetAlbumsForArtist(int artistId) => 
        await AlbumService.GetAlbumsForAtrtistAsync(artistId);

    private async Task Search()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            Artists = await GetArtists();
        }
        else
        {
            Artists = Artists.Where(a => a.Name != null && a.Name.Contains(searchQuery,StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
