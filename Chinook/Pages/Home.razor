@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services.ArtistService
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <input @bind="searchQuery" @bind:event="oninput" @onkeyup="Search">
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Artist> Artists = new List<Artist>();
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] IArtistService ArtistService { get; set; }

    private string searchQuery = string.Empty;


    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<IEnumerable<Artist>> GetArtists()
    {   
        var dbContext = await DbFactory.CreateDbContextAsync();
        var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();

        return await ArtistService.GetAllAsync();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }

    // public async Task<List<Track>> GetTracksForAlbum(int albumId)
    // {
    //     var dbContext = await DbFactory.CreateDbContextAsync();
    //     return dbContext.Tracks.Where(a => a.AlbumId == albumId).ToList();
    // }



    private void Search()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            Artists = GetArtists().Result;
        }
        else
        {
            Artists = Artists.Where(a => a.Name.ToLower().Contains(searchQuery.ToLower())).ToList();
        }
    }
}
