@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims;
@using Chinook.Models;
@using Chinook.ClientModels;
@using Chinook.Services.ArtistService;
@using Chinook.Services.TrackService;
@using Chinook.Services.UserPlayListService;
@using Chinook.Services.PlayListService;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>

                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="HandleSelection">
                @foreach (var playList in UserPlayLists)
                {
                    <option value="@playList.Playlist.PlaylistId">@playList.Playlist.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind="NewPlayListName" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>



@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    @inject IArtistService ArtistService
    @inject ITrackService TrackService
    @inject IUserPlayListService UserPlaylistService
    @inject IPlayListService PlayListService 


    private Modal PlaylistDialog { get; set; }
    private Artist Artist = new Artist();
    private IEnumerable<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private long PlayListId;
    private string NewPlayListName;
    private IEnumerable<UserPlayList> UserPlayLists;


    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = await ArtistService.GetByIdAsync(ArtistId);

        Tracks = await TrackService.GetByArtistIdAsync(ArtistId, CurrentUserId);

        UserPlayLists = await UserPlaylistService.GetAllAsync(CurrentUserId);

    }


    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    /// <summary>
    /// Add track to the Favorites playlist
    /// </summary>
    /// <param name="trackId"></param>
    /// <returns></returns>
    private async Task FavoriteTrack(long trackId)
    {
        var track = Tracks.SingleOrDefault(t => t.TrackId == trackId);

        // If Track is not null then add to Favorites playlist
        if(track != null)
        {
            track.IsFavorite = true;
            await AddToFavouriteAsync(trackId, CurrentUserId);
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        }
        else
        {
            InfoMessage = $"Track cannot be found.";
        }
    }

    /// <summary>
    /// Remove track from the Favorites playlist
    /// </summary>
    /// <param name="trackId"></param>
    private async void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        // if track is not null, then remove from Favorites playlist
        if (track != null)
        {
            track.IsFavorite = false;
            await RemoveFromFavorites(trackId, CurrentUserId);
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
        }
        else
        {
            InfoMessage = $"Track cannot be found.";
        }


    }

    /// <summary>
    /// On dropdown value change event, update the selected value
    /// </summary>
    /// <param name="e"></param>
    void HandleSelection(ChangeEventArgs e)
    {
        PlayListId = e.Value != null ? Convert.ToInt64(e.Value): 0 ;
    }

    /// <summary>
    /// Open the playlist dialog
    /// </summary>
    /// <param name="trackId"></param>
    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    /// <summary>
    /// Add Track to Playlist
    /// </summary>
    /// <returns></returns>
    private async Task AddTrackToPlaylist()
    {
        try
        {
            if (PlayListId == 0 && !string.IsNullOrEmpty(NewPlayListName ))
            {
                // Add New Playlist
                var alreadyExists = await PlayListService.ExistsAsync(NewPlayListName, CurrentUserId);
                if(!alreadyExists)
                {
                    var addedPlayList = await PlayListService.AddAsync(new Models.Playlist { Name = NewPlayListName });
                    var userPlayList = await UserPlaylistService.AddAsync(new UserPlaylist { PlaylistId = addedPlayList.PlaylistId, UserId = CurrentUserId });
                    CloseInfoMessage();
                    InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {userPlayList.Playlist.Name}.";
                }
                else
                {
                    InfoMessage = $"{NewPlayListName} already exists";    
                }
            }
            else
            {
                // Add to Existing Playlist
                await TrackService.AddToPlayList(SelectedTrack.TrackId, PlayListId);
                var userPlayList = UserPlayLists.FirstOrDefault(f => f.PlaylistId == PlayListId);
                var playList = userPlayList ?.Playlist;
                CloseInfoMessage();
                InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {playList.Name}.";
            }
            PlaylistDialog.Close();

        }
        catch(Exception e)
        {
            PlaylistDialog.Close();
            InfoMessage = $"Operation failed. Please try again.";
        }

    }

    /// <summary>
    /// Close the info message
    /// </summary>
    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }



    private async Task AddToFavouriteAsync(long trackId, string currentUserId)
    {
        try
        {
            var favouritePlayList = await PlayListService.GetByNameAsync("Favorites");
            if (favouritePlayList == null)
            {
                favouritePlayList = await PlayListService.AddAsync(new Models.Playlist
                    {
                        Name = "Favorites"
                    }
                );
            }
            var userPlayList = new UserPlaylist { PlaylistId = favouritePlayList.PlaylistId, UserId = currentUserId };
            await TrackService.AddToPlayList(trackId, userPlayList.PlaylistId);
            await UserPlaylistService.AddAsync(userPlayList);
        }
        catch(Exception e)
        {
            InfoMessage = $"Operation failed. Please try again.";
        }
    }

    private async Task RemoveFromFavorites(long trackId, string currentUserId)
    {
        var favoritePlayList = await PlayListService.GetByNameAsync("Favorites");
        if(favoritePlayList != null)
        {
            await UserPlaylistService.DeleteAsync(favoritePlayList.PlaylistId, currentUserId);
        }

    }
}
